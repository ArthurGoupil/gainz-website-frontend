{"ast":null,"code":"var _jsxFileName = \"/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const {\n    0: paints,\n    1: setPaints\n  } = useState([]);\n  const {\n    0: paintsGrid,\n    1: setPaintsGrid\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const paintsArr = []; // const imageRenderer = useCallback(({ index, photo, key }) => {\n  //   <PaintBloc key={key} margin={\"20px\"} index={index} photo={photo} />;\n  // });\n\n  const imageRenderer = useCallback(({\n    index,\n    left,\n    top,\n    key,\n    photo\n  }) => console.log(photo), []);\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, !isLoading ? __jsx(Gallery, {\n    photos: paintsGrid,\n    renderImage: imageRenderer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"test\"));\n};\n\nexport default Paints;","map":{"version":3,"sources":["/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js"],"names":["useState","useEffect","useCallback","axios","Gallery","Layout","PaintBloc","SelectedImage","Paints","props","paints","setPaints","paintsGrid","setPaintsGrid","isLoading","setIsLoading","paintsArr","imageRenderer","index","left","top","key","photo","console","log","fetchPaints","response","get","data","forEach","paint","push","src","smallImage","width","height","e","error","message"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMgB,SAAS,GAAG,EAAlB,CAJsB,CAMtB;AACA;AACA;;AAEA,QAAMC,aAAa,GAAGf,WAAW,CAC/B,CAAC;AAAEgB,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,GAAf;AAAoBC,IAAAA,GAApB;AAAyBC,IAAAA;AAAzB,GAAD,KAAsCC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADP,EAE/B,EAF+B,CAAjC;AAKA,QAAMG,WAAW,GAAGvB,WAAW,CAAC,YAAY;AAC1C,QAAI;AACF,YAAMwB,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAU,8BAAV,CAAvB;AACAhB,MAAAA,SAAS,CAACe,QAAQ,CAACE,IAAV,CAAT;AACAF,MAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,KAAK,IAAI;AAC7Bd,QAAAA,SAAS,CAACe,IAAV,CAAe;AACbC,UAAAA,GAAG,EAAEF,KAAK,CAACG,UADE;AAEbC,UAAAA,KAAK,EAAEJ,KAAK,CAACI,KAFA;AAGbC,UAAAA,MAAM,EAAEL,KAAK,CAACK;AAHD,SAAf;AAKD,OAND;AAOAtB,MAAAA,aAAa,CAACG,SAAD,CAAb;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAZD,CAYE,OAAOqB,CAAP,EAAU;AACVb,MAAAA,OAAO,CAACc,KAAR,CAAcD,CAAC,CAACE,OAAhB;AACD;AACF,GAhB8B,CAA/B;AAkBArC,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACX,SAAD,GACC,MAAC,OAAD;AAAS,IAAA,MAAM,EAAEF,UAAjB;AAA6B,IAAA,WAAW,EAAEK,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,CADF;AASD,CA9CD;;AAgDA,eAAeT,MAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\n\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const [paints, setPaints] = useState([]);\n  const [paintsGrid, setPaintsGrid] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const paintsArr = [];\n\n  // const imageRenderer = useCallback(({ index, photo, key }) => {\n  //   <PaintBloc key={key} margin={\"20px\"} index={index} photo={photo} />;\n  // });\n\n  const imageRenderer = useCallback(\n    ({ index, left, top, key, photo }) => console.log(photo),\n    []\n  );\n\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n\n  return (\n    <Layout>\n      {!isLoading ? (\n        <Gallery photos={paintsGrid} renderImage={imageRenderer} />\n      ) : (\n        <span>test</span>\n      )}\n    </Layout>\n  );\n};\n\nexport default Paints;\n"]},"metadata":{},"sourceType":"module"}