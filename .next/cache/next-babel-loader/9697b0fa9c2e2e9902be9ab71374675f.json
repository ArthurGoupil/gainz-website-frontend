{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\n\nvar Paintings = function Paintings(props) {\n  var _useState = useState([]),\n      paintings = _useState[0],\n      setPaintings = _useState[1];\n\n  var _useState2 = useState([]),\n      paintingsGrid = _useState2[0],\n      setPaintingsGrid = _useState2[1];\n\n  var _useState3 = useState(true),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var paintingsArr = [];\n  var fetchPaintings = useCallback(function _callee() {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"http://localhost:3100/paintings\"));\n\n          case 3:\n            response = _context.sent;\n            setPaintings(response.data);\n            response.data.forEach(function (painting) {\n              paintingsArr.push({\n                src: painting.smallImage,\n                width: painting.width,\n                height: painting.height\n              });\n            });\n            setPaintingsGrid(paintingsArr);\n            setIsLoading(false);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0.message);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  });\n  useEffect(function () {\n    fetchPaintings();\n  }, []);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, !isLoading ? __jsx(Gallery, {\n    margin: 10,\n    photos: paintingsGrid,\n    limitNodeSearch: 3,\n    targetRowHeight: 450,\n    renderImage: function renderImage(_ref) {\n      var index = _ref.index,\n          photo = _ref.photo,\n          margin = _ref.margin;\n      return __jsx(PaintBloc, _extends({\n        key: paintings[index]._id,\n        index: index,\n        photo: photo,\n        margin: margin\n      }, paintings[index], {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"test\"));\n};\n\nexport default Paintings;","map":{"version":3,"sources":["/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js"],"names":["useState","useEffect","useCallback","axios","Gallery","Layout","PaintBloc","Paintings","props","paintings","setPaintings","paintingsGrid","setPaintingsGrid","isLoading","setIsLoading","paintingsArr","fetchPaintings","get","response","data","forEach","painting","push","src","smallImage","width","height","console","error","message","index","photo","margin","_id"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,kBACSR,QAAQ,CAAC,EAAD,CADjB;AAAA,MAClBS,SADkB;AAAA,MACPC,YADO;;AAAA,mBAEiBV,QAAQ,CAAC,EAAD,CAFzB;AAAA,MAElBW,aAFkB;AAAA,MAEHC,gBAFG;;AAAA,mBAGSZ,QAAQ,CAAC,IAAD,CAHjB;AAAA,MAGlBa,SAHkB;AAAA,MAGPC,YAHO;;AAIzB,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,cAAc,GAAGd,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAERC,KAAK,CAACc,GAAN,CAAU,iCAAV,CAFQ;;AAAA;AAEzBC,YAAAA,QAFyB;AAG/BR,YAAAA,YAAY,CAACQ,QAAQ,CAACC,IAAV,CAAZ;AACAD,YAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsB,UAAAC,QAAQ,EAAI;AAChCN,cAAAA,YAAY,CAACO,IAAb,CAAkB;AAChBC,gBAAAA,GAAG,EAAEF,QAAQ,CAACG,UADE;AAEhBC,gBAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAFA;AAGhBC,gBAAAA,MAAM,EAAEL,QAAQ,CAACK;AAHD,eAAlB;AAKD,aAND;AAOAd,YAAAA,gBAAgB,CAACG,YAAD,CAAhB;AACAD,YAAAA,YAAY,CAAC,KAAD,CAAZ;AAZ+B;AAAA;;AAAA;AAAA;AAAA;AAc/Ba,YAAAA,OAAO,CAACC,KAAR,CAAc,YAAEC,OAAhB;;AAd+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,CAAlC;AAkBA5B,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACH,SAAD,GACC,MAAC,OAAD;AACE,IAAA,MAAM,EAAE,EADV;AAEE,IAAA,MAAM,EAAEF,aAFV;AAGE,IAAA,eAAe,EAAE,CAHnB;AAIE,IAAA,eAAe,EAAE,GAJnB;AAKE,IAAA,WAAW,EAAE;AAAA,UAAGmB,KAAH,QAAGA,KAAH;AAAA,UAAUC,KAAV,QAAUA,KAAV;AAAA,UAAiBC,MAAjB,QAAiBA,MAAjB;AAAA,aACX,MAAC,SAAD;AACE,QAAA,GAAG,EAAEvB,SAAS,CAACqB,KAAD,CAAT,CAAiBG,GADxB;AAEE,QAAA,KAAK,EAAEH,KAFT;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,MAAM,EAAEC;AAJV,SAKMvB,SAAS,CAACqB,KAAD,CALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADW;AAAA,KALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAiBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ,CADF;AAuBD,CAnDD;;AAqDA,eAAevB,SAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\n\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\n\nconst Paintings = props => {\n  const [paintings, setPaintings] = useState([]);\n  const [paintingsGrid, setPaintingsGrid] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const paintingsArr = [];\n\n  const fetchPaintings = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paintings\");\n      setPaintings(response.data);\n      response.data.forEach(painting => {\n        paintingsArr.push({\n          src: painting.smallImage,\n          width: painting.width,\n          height: painting.height\n        });\n      });\n      setPaintingsGrid(paintingsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n\n  useEffect(() => {\n    fetchPaintings();\n  }, []);\n\n  return (\n    <Layout>\n      {!isLoading ? (\n        <Gallery\n          margin={10}\n          photos={paintingsGrid}\n          limitNodeSearch={3}\n          targetRowHeight={450}\n          renderImage={({ index, photo, margin }) => (\n            <PaintBloc\n              key={paintings[index]._id}\n              index={index}\n              photo={photo}\n              margin={margin}\n              {...paintings[index]}\n            />\n          )}\n        />\n      ) : (\n        <span>test</span>\n      )}\n    </Layout>\n  );\n};\n\nexport default Paintings;\n"]},"metadata":{},"sourceType":"module"}