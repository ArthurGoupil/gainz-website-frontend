{"ast":null,"code":"var _jsxFileName = \"/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const {\n    0: paints,\n    1: setPaints\n  } = useState([]);\n  const {\n    0: paintsGrid,\n    1: setPaintsGrid\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const paintsArr = [];\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          _id: paint._id,\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, !isLoading ? __jsx(Gallery, {\n    photos: paintsGrid,\n    renderImage: ({\n      index,\n      left,\n      top,\n      key,\n      photo\n    }) => __jsx(PaintBloc, _extends({\n      key: idints[index]._ID,\n      margin: \"20px\",\n      index: index\n    }, paints[index], {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })) // <SelectedImage\n    //   selected={false}\n    //   key={photo._id}\n    //   margin={\"2px\"}\n    //   index={index}\n    //   photo={photo}\n    //   left={left}\n    //   top={top}\n    // />\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"test\"));\n};\n\nexport default Paints;","map":{"version":3,"sources":["/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js"],"names":["useState","useEffect","useCallback","axios","Gallery","Layout","PaintBloc","SelectedImage","Paints","props","paints","setPaints","paintsGrid","setPaintsGrid","isLoading","setIsLoading","paintsArr","fetchPaints","response","get","data","forEach","paint","push","_id","src","smallImage","width","height","e","console","error","message","index","left","top","key","photo","idints","_ID"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMgB,SAAS,GAAG,EAAlB;AAEA,QAAMC,WAAW,GAAGf,WAAW,CAAC,YAAY;AAC1C,QAAI;AACF,YAAMgB,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,8BAAV,CAAvB;AACAR,MAAAA,SAAS,CAACO,QAAQ,CAACE,IAAV,CAAT;AACAF,MAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,KAAK,IAAI;AAC7BN,QAAAA,SAAS,CAACO,IAAV,CAAe;AACbC,UAAAA,GAAG,EAAEF,KAAK,CAACE,GADE;AAEbC,UAAAA,GAAG,EAAEH,KAAK,CAACI,UAFE;AAGbC,UAAAA,KAAK,EAAEL,KAAK,CAACK,KAHA;AAIbC,UAAAA,MAAM,EAAEN,KAAK,CAACM;AAJD,SAAf;AAMD,OAPD;AAQAf,MAAAA,aAAa,CAACG,SAAD,CAAb;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAbD,CAaE,OAAOc,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,OAAhB;AACD;AACF,GAjB8B,CAA/B;AAmBA/B,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACH,SAAD,GACC,MAAC,OAAD;AACE,IAAA,MAAM,EAAEF,UADV;AAEE,IAAA,WAAW,EACT,CAAC;AAAEqB,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA,GAAf;AAAoBC,MAAAA,GAApB;AAAyBC,MAAAA;AAAzB,KAAD,KACE,MAAC,SAAD;AACE,MAAA,GAAG,EAAEC,MAAM,CAACL,KAAD,CAAN,CAAcM,GADrB;AAEE,MAAA,MAAM,EAAE,MAFV;AAGE,MAAA,KAAK,EAAEN;AAHT,OAIMvB,MAAM,CAACuB,KAAD,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFO,CAST;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAwBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ,CADF;AA8BD,CA3DD;;AA6DA,eAAezB,MAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\n\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const [paints, setPaints] = useState([]);\n  const [paintsGrid, setPaintsGrid] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const paintsArr = [];\n\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          _id: paint._id,\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n\n  return (\n    <Layout>\n      {!isLoading ? (\n        <Gallery\n          photos={paintsGrid}\n          renderImage={\n            ({ index, left, top, key, photo }) => (\n              <PaintBloc\n                key={idints[index]._ID}\n                margin={\"20px\"}\n                index={index}\n                {...paints[index]}\n              />\n            )\n            // <SelectedImage\n            //   selected={false}\n            //   key={photo._id}\n            //   margin={\"2px\"}\n            //   index={index}\n            //   photo={photo}\n            //   left={left}\n            //   top={top}\n            // />\n          }\n        />\n      ) : (\n        <span>test</span>\n      )}\n    </Layout>\n  );\n};\n\nexport default Paints;\n"]},"metadata":{},"sourceType":"module"}