{"ast":null,"code":"var _jsxFileName = \"/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const {\n    0: paints,\n    1: setPaints\n  } = useState([]);\n  const {\n    0: paintsGrid,\n    1: setPaintsGrid\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const paintsArr = []; // const imageRenderer = useCallback(({ index, photo, key }) => {\n  // });\n\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          _id: paint._id,\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n  const imageRenderer = useCallback(({\n    index,\n    left,\n    top,\n    key,\n    photo\n  }) => console.log(paints), // <PaintBloc key={key} margin={\"20px\"} index={index} {...paints[index]} />\n  // <SelectedImage\n  //   selected={false}\n  //   key={photo._id}\n  //   margin={\"2px\"}\n  //   index={index}\n  //   photo={photo}\n  //   left={left}\n  //   top={top}\n  // />\n  []);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, !isLoading ? __jsx(Gallery, {\n    photos: paintsGrid,\n    renderImage: () => console.log(paints[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }) : __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"test\"));\n};\n\nexport default Paints;","map":{"version":3,"sources":["/Users/ArthurGoupil/Documents/Development/Projects/React/gainz-website/frontend/pages/paints.js"],"names":["useState","useEffect","useCallback","axios","Gallery","Layout","PaintBloc","SelectedImage","Paints","props","paints","setPaints","paintsGrid","setPaintsGrid","isLoading","setIsLoading","paintsArr","fetchPaints","response","get","data","forEach","paint","push","_id","src","smallImage","width","height","e","console","error","message","imageRenderer","index","left","top","key","photo","log"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMgB,SAAS,GAAG,EAAlB,CAJsB,CAMtB;AACA;;AAEA,QAAMC,WAAW,GAAGf,WAAW,CAAC,YAAY;AAC1C,QAAI;AACF,YAAMgB,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,8BAAV,CAAvB;AACAR,MAAAA,SAAS,CAACO,QAAQ,CAACE,IAAV,CAAT;AACAF,MAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,KAAK,IAAI;AAC7BN,QAAAA,SAAS,CAACO,IAAV,CAAe;AACbC,UAAAA,GAAG,EAAEF,KAAK,CAACE,GADE;AAEbC,UAAAA,GAAG,EAAEH,KAAK,CAACI,UAFE;AAGbC,UAAAA,KAAK,EAAEL,KAAK,CAACK,KAHA;AAIbC,UAAAA,MAAM,EAAEN,KAAK,CAACM;AAJD,SAAf;AAMD,OAPD;AAQAf,MAAAA,aAAa,CAACG,SAAD,CAAb;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAbD,CAaE,OAAOc,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,OAAhB;AACD;AACF,GAjB8B,CAA/B;AAmBA/B,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMgB,aAAa,GAAG/B,WAAW,CAC/B,CAAC;AAAEgC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,GAAf;AAAoBC,IAAAA,GAApB;AAAyBC,IAAAA;AAAzB,GAAD,KAAsCR,OAAO,CAACS,GAAR,CAAY7B,MAAZ,CADP,EAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAb+B,CAAjC;AAgBA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACI,SAAD,GACC,MAAC,OAAD;AACE,IAAA,MAAM,EAAEF,UADV;AAEE,IAAA,WAAW,EAAE,MAAMkB,OAAO,CAACS,GAAR,CAAY7B,MAAM,CAAC,CAAD,CAAlB,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,CADF;AAYD,CA5DD;;AA8DA,eAAeF,MAAf","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nimport axios from \"axios\";\nimport Gallery from \"react-photo-gallery\";\n\nimport Layout from \"../components/Layout\";\nimport PaintBloc from \"../components/PaintBloc\";\nimport SelectedImage from \"../components/SelectedImage\";\n\nconst Paints = props => {\n  const [paints, setPaints] = useState([]);\n  const [paintsGrid, setPaintsGrid] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const paintsArr = [];\n\n  // const imageRenderer = useCallback(({ index, photo, key }) => {\n  // });\n\n  const fetchPaints = useCallback(async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3100/paints\");\n      setPaints(response.data);\n      response.data.forEach(paint => {\n        paintsArr.push({\n          _id: paint._id,\n          src: paint.smallImage,\n          width: paint.width,\n          height: paint.height\n        });\n      });\n      setPaintsGrid(paintsArr);\n      setIsLoading(false);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n\n  useEffect(() => {\n    fetchPaints();\n  }, []);\n\n  const imageRenderer = useCallback(\n    ({ index, left, top, key, photo }) => console.log(paints),\n\n    // <PaintBloc key={key} margin={\"20px\"} index={index} {...paints[index]} />\n    // <SelectedImage\n    //   selected={false}\n    //   key={photo._id}\n    //   margin={\"2px\"}\n    //   index={index}\n    //   photo={photo}\n    //   left={left}\n    //   top={top}\n    // />\n    []\n  );\n\n  return (\n    <Layout>\n      {!isLoading ? (\n        <Gallery\n          photos={paintsGrid}\n          renderImage={() => console.log(paints[0])}\n        />\n      ) : (\n        <span>test</span>\n      )}\n    </Layout>\n  );\n};\n\nexport default Paints;\n"]},"metadata":{},"sourceType":"module"}